// Package types contains RPC wrappers for Types contract.
package types

import (
	"errors"
	"fmt"
	"github.com/nspcc-dev/neo-go/pkg/crypto/keys"
	"github.com/nspcc-dev/neo-go/pkg/neorpc/result"
	"github.com/nspcc-dev/neo-go/pkg/rpcclient/unwrap"
	"github.com/nspcc-dev/neo-go/pkg/util"
	"github.com/nspcc-dev/neo-go/pkg/vm/stackitem"
	"math/big"
	"unicode/utf8"
)

// Hash contains contract hash.
var Hash = util.Uint160{0x33, 0x22, 0x11, 0x0, 0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0x0}

// Invoker is used by ContractReader to call various safe methods.
type Invoker interface {
	Call(contract util.Uint160, operation string, params ...any) (*result.Invoke, error)
}

// ContractReader implements safe contract methods.
type ContractReader struct {
	invoker Invoker
}

// NewReader creates an instance of ContractReader using Hash and the given Invoker.
func NewReader(invoker Invoker) *ContractReader {
	return &ContractReader{invoker}
}


// AAAStrings invokes `aAAStrings` method of contract.
func (c *ContractReader) AAAStrings(s [][][]string) ([][][]string, error) {
	return func (item stackitem.Item, err error) ([][][]string, error) {
		if err != nil {
			return nil, err
		}
		return func (item stackitem.Item) ([][][]string, error) {
			arr, ok := item.Value().([]stackitem.Item)
			if !ok {
				return nil, errors.New("not an array")
			}
			res := make([][][]string, len(arr))
			for i := range res {
				res[i], err = func (item stackitem.Item) ([][]string, error) {
					arr, ok := item.Value().([]stackitem.Item)
					if !ok {
						return nil, errors.New("not an array")
					}
					res := make([][]string, len(arr))
					for i := range res {
						res[i], err = func (item stackitem.Item) ([]string, error) {
							arr, ok := item.Value().([]stackitem.Item)
							if !ok {
								return nil, errors.New("not an array")
							}
							res := make([]string, len(arr))
							for i := range res {
								res[i], err = func (item stackitem.Item) (string, error) {
									b, err := item.TryBytes()
									if err != nil {
										return "", err
									}
									if !utf8.Valid(b) {
										return "", errors.New("not a UTF-8 string")
									}
									return string(b), nil
								} (arr[i])
								if err != nil {
									return nil, fmt.Errorf("item %d: %w", i, err)
								}
							}
							return res, nil
						} (arr[i])
						if err != nil {
							return nil, fmt.Errorf("item %d: %w", i, err)
						}
					}
					return res, nil
				} (arr[i])
				if err != nil {
					return nil, fmt.Errorf("item %d: %w", i, err)
				}
			}
			return res, nil
		} (item)
	} (unwrap.Item(c.invoker.Call(Hash, "aAAStrings", s)))
}

// Any invokes `any` method of contract.
func (c *ContractReader) Any(a any) (any, error) {
	return func (item stackitem.Item, err error) (any, error) {
		if err != nil {
			return nil, err
		}
		return item.Value(), error(nil)
	} (unwrap.Item(c.invoker.Call(Hash, "any", a)))
}

// Bool invokes `bool` method of contract.
func (c *ContractReader) Bool(b bool) (bool, error) {
	return unwrap.Bool(c.invoker.Call(Hash, "bool", b))
}

// Bools invokes `bools` method of contract.
func (c *ContractReader) Bools(b []bool) ([]bool, error) {
	return unwrap.ArrayOfBools(c.invoker.Call(Hash, "bools", b))
}

// Bytes invokes `bytes` method of contract.
func (c *ContractReader) Bytes(b []byte) ([]byte, error) {
	return unwrap.Bytes(c.invoker.Call(Hash, "bytes", b))
}

// Bytess invokes `bytess` method of contract.
func (c *ContractReader) Bytess(b [][]byte) ([][]byte, error) {
	return unwrap.ArrayOfBytes(c.invoker.Call(Hash, "bytess", b))
}

// CrazyMaps invokes `crazyMaps` method of contract.
func (c *ContractReader) CrazyMaps(m map[*big.Int][]map[string][]util.Uint160) (map[*big.Int][]map[string][]util.Uint160, error) {
	return func (item stackitem.Item, err error) (map[*big.Int][]map[string][]util.Uint160, error) {
		if err != nil {
			return nil, err
		}
		return func (item stackitem.Item) (map[*big.Int][]map[string][]util.Uint160, error) {
			m, ok := item.Value().([]stackitem.MapElement)
			if !ok {
				return nil, fmt.Errorf("%s is not a map", item.Type().String())
			}
			res := make(map[*big.Int][]map[string][]util.Uint160)
			for i := range m {
				k, err := m[i].Key.TryInteger()
				if err != nil {
					return nil, fmt.Errorf("key %d: %w", i, err)
				}
				v, err := func (item stackitem.Item) ([]map[string][]util.Uint160, error) {
					arr, ok := item.Value().([]stackitem.Item)
					if !ok {
						return nil, errors.New("not an array")
					}
					res := make([]map[string][]util.Uint160, len(arr))
					for i := range res {
						res[i], err = func (item stackitem.Item) (map[string][]util.Uint160, error) {
							m, ok := item.Value().([]stackitem.MapElement)
							if !ok {
								return nil, fmt.Errorf("%s is not a map", item.Type().String())
							}
							res := make(map[string][]util.Uint160)
							for i := range m {
								k, err := func (item stackitem.Item) (string, error) {
									b, err := item.TryBytes()
									if err != nil {
										return "", err
									}
									if !utf8.Valid(b) {
										return "", errors.New("not a UTF-8 string")
									}
									return string(b), nil
								} (m[i].Key)
								if err != nil {
									return nil, fmt.Errorf("key %d: %w", i, err)
								}
								v, err := func (item stackitem.Item) ([]util.Uint160, error) {
									arr, ok := item.Value().([]stackitem.Item)
									if !ok {
										return nil, errors.New("not an array")
									}
									res := make([]util.Uint160, len(arr))
									for i := range res {
										res[i], err = func (item stackitem.Item) (util.Uint160, error) {
											b, err := item.TryBytes()
											if err != nil {
												return util.Uint160{}, err
											}
											u, err := util.Uint160DecodeBytesBE(b)
											if err != nil {
												return util.Uint160{}, err
											}
											return u, nil
										} (arr[i])
										if err != nil {
											return nil, fmt.Errorf("item %d: %w", i, err)
										}
									}
									return res, nil
								} (m[i].Value)
								if err != nil {
									return nil, fmt.Errorf("value %d: %w", i, err)
								}
								res[k] = v
							}
							return res, nil
						} (arr[i])
						if err != nil {
							return nil, fmt.Errorf("item %d: %w", i, err)
						}
					}
					return res, nil
				} (m[i].Value)
				if err != nil {
					return nil, fmt.Errorf("value %d: %w", i, err)
				}
				res[k] = v
			}
			return res, nil
		} (item)
	} (unwrap.Item(c.invoker.Call(Hash, "crazyMaps", m)))
}

// Hash160 invokes `hash160` method of contract.
func (c *ContractReader) Hash160(h util.Uint160) (util.Uint160, error) {
	return unwrap.Uint160(c.invoker.Call(Hash, "hash160", h))
}

// Hash160s invokes `hash160s` method of contract.
func (c *ContractReader) Hash160s(h []util.Uint160) ([]util.Uint160, error) {
	return unwrap.ArrayOfUint160(c.invoker.Call(Hash, "hash160s", h))
}

// Hash256 invokes `hash256` method of contract.
func (c *ContractReader) Hash256(h util.Uint256) (util.Uint256, error) {
	return unwrap.Uint256(c.invoker.Call(Hash, "hash256", h))
}

// Hash256s invokes `hash256s` method of contract.
func (c *ContractReader) Hash256s(h []util.Uint256) ([]util.Uint256, error) {
	return unwrap.ArrayOfUint256(c.invoker.Call(Hash, "hash256s", h))
}

// Int invokes `int` method of contract.
func (c *ContractReader) Int(i *big.Int) (*big.Int, error) {
	return unwrap.BigInt(c.invoker.Call(Hash, "int", i))
}

// Ints invokes `ints` method of contract.
func (c *ContractReader) Ints(i []*big.Int) ([]*big.Int, error) {
	return unwrap.ArrayOfBigInts(c.invoker.Call(Hash, "ints", i))
}

// Maps invokes `maps` method of contract.
func (c *ContractReader) Maps(m map[string]string) (map[string]string, error) {
	return func (item stackitem.Item, err error) (map[string]string, error) {
		if err != nil {
			return nil, err
		}
		return func (item stackitem.Item) (map[string]string, error) {
			m, ok := item.Value().([]stackitem.MapElement)
			if !ok {
				return nil, fmt.Errorf("%s is not a map", item.Type().String())
			}
			res := make(map[string]string)
			for i := range m {
				k, err := func (item stackitem.Item) (string, error) {
					b, err := item.TryBytes()
					if err != nil {
						return "", err
					}
					if !utf8.Valid(b) {
						return "", errors.New("not a UTF-8 string")
					}
					return string(b), nil
				} (m[i].Key)
				if err != nil {
					return nil, fmt.Errorf("key %d: %w", i, err)
				}
				v, err := func (item stackitem.Item) (string, error) {
					b, err := item.TryBytes()
					if err != nil {
						return "", err
					}
					if !utf8.Valid(b) {
						return "", errors.New("not a UTF-8 string")
					}
					return string(b), nil
				} (m[i].Value)
				if err != nil {
					return nil, fmt.Errorf("value %d: %w", i, err)
				}
				res[k] = v
			}
			return res, nil
		} (item)
	} (unwrap.Item(c.invoker.Call(Hash, "maps", m)))
}

// PublicKey invokes `publicKey` method of contract.
func (c *ContractReader) PublicKey(k *keys.PublicKey) (*keys.PublicKey, error) {
	return unwrap.PublicKey(c.invoker.Call(Hash, "publicKey", k))
}

// PublicKeys invokes `publicKeys` method of contract.
func (c *ContractReader) PublicKeys(k keys.PublicKeys) (keys.PublicKeys, error) {
	return unwrap.ArrayOfPublicKeys(c.invoker.Call(Hash, "publicKeys", k))
}

// Signature invokes `signature` method of contract.
func (c *ContractReader) Signature(s []byte) ([]byte, error) {
	return unwrap.Bytes(c.invoker.Call(Hash, "signature", s))
}

// Signatures invokes `signatures` method of contract.
func (c *ContractReader) Signatures(s [][]byte) ([][]byte, error) {
	return unwrap.ArrayOfBytes(c.invoker.Call(Hash, "signatures", s))
}

// String invokes `string` method of contract.
func (c *ContractReader) String(s string) (string, error) {
	return unwrap.UTF8String(c.invoker.Call(Hash, "string", s))
}

// Strings invokes `strings` method of contract.
func (c *ContractReader) Strings(s []string) ([]string, error) {
	return unwrap.ArrayOfUTF8Strings(c.invoker.Call(Hash, "strings", s))
}
